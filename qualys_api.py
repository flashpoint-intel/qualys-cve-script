import requests
import csv
import getpass
import sys
from configparser import ConfigParser
import argparse
import datetime

# Global Variables
SCAN_ENDPOINT = "/api/2.0/fo/scan/"
HEADERS = {"X-Requested-With": "Python API"}
LOGIN_DATA = {"action": "login", "username": "", "password": ""}
SCAN_DATA = {"action": "fetch", "scan_ref": "", "output_format": "json_extended"}
CONF_FILENAME = "./qualys_fp.conf"
CURRENT_DATE = datetime.datetime.now().strftime('%Y%m%d%H%M%S')


# Handles Switches for script
def parse_args(args: list = []) -> object:
    parser = argparse.ArgumentParser(description="Pull CVEs from Qualys Scanner for use with the Flashpoint Platform. A username, API endpoint, \
        and Scan Reference must be provided or a configuration file using the -config tag. A default configuration file can be stored in the same \
        directory as this script with the name of qualys_fp.conf which should be provided with this script.")
    parser.add_argument("--user", type=str, help="User Name for Qualys'")
    parser.add_argument("--api", type=str, help="Qualys API Endpoint")
    parser.add_argument("--scan", type=str, help="Scan Reference (scan/<ref>)")
    parser.add_argument("--config", type=str, default=CONF_FILENAME, help="Path to a Configuration File")

    return parser.parse_args(args)


# Sets login information to Global Variables
def set_authentication(user_name: str = "", password: object = "") -> None:
    LOGIN_DATA["username"] = user_name
    LOGIN_DATA["password"] = password


# Makes a Post request to the Qualys API
def api_call(url: str = "", data: dict = {}, user_name: str = "", password: object = "") -> dict:
    try:
        response = requests.post(url, headers=HEADERS, data=data, auth=(user_name, password))
        if response.headers["Content-Type"] == "text/html; charset=UTF-8":
            response.raise_for_status()
            return response.json()
        else:
            raise Exception(response.text)
    except Exception as e:
        print(f"Issue with response: {e}")
        sys.exit(1)


# Pulls out CVE information from Scans
def get_scan(api: str = "", scan_id: str = "") -> str:
    SCAN_DATA["scan_ref"] = scan_id
    request = api_call(api + SCAN_ENDPOINT, SCAN_DATA, LOGIN_DATA["username"], LOGIN_DATA["password"])
    data_store = request
    scan_title = data_store[1]["scan_title"]
    temp_cve_list = set()
    for x in data_store:
        try:
            if x["cve_id"]:
                temp_cve_list.update(set(y.strip() for y in x["cve_id"].split(",")))
        except Exception as e:
            print(f"{e} Doesn't exist!")

    return (scan_title, temp_cve_list)


# Exports CVE information to text file and CSV file
def export_cves(scan_title: str = "", cve_list: list = []) -> None:
    # Export CVEs to a Text file for searching in the Platform
    with open(f"{scan_title}_cve_{CURRENT_DATE}.txt", "w") as f:
        search_string = ""
        if cve_list:
            for x in cve_list:
                search_string += f'"{x}" | '
                search_string = search_string[:-3]
            f.write(search_string)
        else:
            f.write("No CVEs Found")

    # Export CVEs to a CSV file for use in the Platform
    with open(f"{scan_title}_cve_{CURRENT_DATE}.csv", "w") as f:
        writer = csv.writer(f, delimiter=",")
        if cve_list:
            writer.writerow(cve_list)
        else:
            f.write("No CVEs Found")


# Grabs information from Qualys Configuration File
def get_qualys_config(conf_filename: str = CONF_FILENAME) -> (str, str):
    try:
        parser = ConfigParser()
        parser.read(conf_filename)
        for key, value in parser.items("qualys_login"):
            LOGIN_DATA[key] = value
        for key, value in parser.items("qualys_api_url"):
            if key == 'url':
                API_ENDPOINT = value
        for key, value in parser.items("qualys_scans"):
            scan_id = value
        return scan_id, API_ENDPOINT
    except Exception as e:
        print(f"Configuration file issue: {e}")
        sys.exit(1)


def main(args: list = []):
    args = parse_args(args)
    if (args.user and args.api and args.scan) is not None:
        password = getpass.getpass()
        set_authentication(args.user, password)
        scan_id = args.scan
        api = args.api
    else:
        scan_id, api = get_qualys_config(args.config)
    scan_title, cve_list = get_scan(api, scan_id)
    export_cves(scan_title, cve_list)


if __name__ == "__main__":
    main(sys.argv[1:])
